<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="gov.alaska.dggs.igneous.Audit">

	<insert id="insertGroup" useGeneratedKeys="true" keyColumn="audit_group_id" keyProperty="id">
		INSERT INTO audit_group (remark) VALUES (#{remark})
	</insert>


	<insert id="insert" useGeneratedKeys="true" keyColumn="audit_id" keyProperty="id">
		INSERT INTO audit (audit_group_id, barcode)
		VALUES (#{group.id}, #{barcode})
	</insert>

	<!--
		This function prints summary details on problems with an audit
		for a range. It's only appropriate if we're assuming each
		audit_group in the date range is a discrete container.
	-->
	<select id="getReportByDate" resultSetType="FORWARD_ONLY" parameterType="map" resultType="HashMap">
		SELECT qag.audit_group_id, qag.remark, qc.container_id,
			qc.path_cache AS path, dp.duplicates, nm.no_match,
			ws.wrong_shelf,
			<!--
				calculate the difference between the total number of barcodes
				in this group, and the expected number of barcodes in the 
				assumed container - we fallback on the audit group count
				if the container count is null, because if the container
				count is null it means we couldn't find a container.
			-->
			ABS((COALESCE(agc.cnt, 0) - COALESCE(ws.wrong_shelf, 0)) - COALESCE(cc.cnt, agc.cnt, 0)) AS difference
		FROM audit_group AS qag
		LEFT OUTER JOIN container AS qc
			ON qag.remark = COALESCE(qc.barcode, qc.alt_barcode)
			AND qc.active
		LEFT OUTER JOIN (
			<!-- Count duplicates for each audit group -->
			SELECT q.audit_group_id, COUNT(*) AS duplicates
			FROM (
				SELECT a.audit_group_id, a.barcode, COUNT(*)
				FROM audit AS a
				GROUP BY a.audit_group_id, a.barcode
				HAVING COUNT(*) > 1
				ORDER BY audit_group_id, barcode
			) AS q
			GROUP BY audit_group_id
		) AS dp ON dp.audit_group_id = qag.audit_group_id
		LEFT OUTER JOIN (
			<!--
				Count the number of barcodes that couldn't be matched
				for each group
			-->
			SELECT ag.audit_group_id, COUNT(*) AS no_match
			FROM audit_group AS ag
			JOIN audit AS a
				ON a.audit_group_id = ag.audit_group_id
			LEFT OUTER JOIN inventory AS i
				ON a.barcode = COALESCE(i.barcode, i.alt_barcode)
				AND i.active
			LEFT OUTER JOIN container AS c
				ON a.barcode = COALESCE(c.barcode, c.alt_barcode)
				AND c.active
			WHERE i.inventory_id IS NULL
				AND c.container_id IS NULL
			GROUP BY ag.audit_group_id
		) AS nm ON nm.audit_group_id = qag.audit_group_id
		LEFT OUTER JOIN (
			<!-- Count the number of incorrect container_id's in each group -->
			SELECT audit_group_id, COUNT(*) AS wrong_shelf
			FROM (
				SELECT ag.audit_group_id, i.container_id
				FROM audit_group AS ag
				JOIN audit AS a
					ON a.audit_group_id = ag.audit_group_id
				JOIN container AS c
					ON ag.remark = COALESCE(c.barcode, c.alt_barcode)
					AND c.active
				JOIN inventory AS i
					ON a.barcode = COALESCE(i.barcode, i.alt_barcode)
					AND i.active
				WHERE c.container_id &lt;&gt; i.container_id
					OR i.container_id IS NULL

				UNION ALL

				SELECT ag.audit_group_id,
					c2.parent_container_id AS container_id
				FROM audit_group AS ag
				JOIN audit AS a
					ON a.audit_group_id = ag.audit_group_id
				JOIN container AS c1
					ON ag.remark = COALESCE(c1.barcode, c1.alt_barcode)
					AND c1.active
				JOIN container AS c2
					ON a.barcode = COALESCE(c2.barcode, c2.alt_barcode)
					AND c2.active
				WHERE c1.container_id &lt;&gt; c2.parent_container_id
					OR c2.parent_container_id IS NULL
			) AS q
			GROUP BY audit_group_id
		) AS ws ON ws.audit_group_id = qag.audit_group_id
		LEFT OUTER JOIN (
			<!-- Count the total number of distinct barcodes in this each group -->
			SELECT audit_group_id, COUNT(barcode) AS cnt
			FROM (
				SELECT DISTINCT audit_group_id, barcode
				FROM audit
			) AS q
			GROUP BY audit_group_id
		) agc ON agc.audit_group_id = qag.audit_group_id
		LEFT OUTER JOIN (
			<!-- Count the total number of distinct barcodes in each container -->
			SELECT container_id, COUNT(barcode) AS cnt
			FROM (
				SELECT DISTINCT container_id,
					COALESCE(barcode, alt_barcode) AS barcode
				FROM inventory
				WHERE active
					AND COALESCE(barcode, alt_barcode) IS NOT NULL
					AND container_id IS NOT NULL

				UNION

				SELECT DISTINCT parent_container_id AS container_id,
					COALESCE(barcode, alt_barcode) AS barcode
				FROM container
				WHERE active
					AND COALESCE(barcode, alt_barcode) IS NOT NULL
					AND parent_container_id IS NOT NULL
			) AS q
			GROUP BY container_id
		) AS cc ON cc.container_id = qc.container_id
		WHERE qag.create_date BETWEEN #{start}::timestamp AND #{end}::timestamp
		<if test="path != null">
			AND qc.path_cache ILIKE #{path}
		</if>
		ORDER BY qc.path_cache
	</select>


	<!--
		This function returns details on the results of a test from
		getReportByDate. It should return a scanned barcode, the barcode
		found in the database, and the container path. If these values
		are null, they're not found. If the container_id doesn't match the
		provided container_id, it was found in the wrong location.

		A sort is done based on the container_id, against the container_id
		specified using a DISTINCT so that if a box exists in multiple locations
		it only shows us the location we specified. The distinct is performed
		against the barcode (or the audit_id) in case there's multiple
		entries in the database for that barcode.
	-->
	<select id="getReportDetail" resultSetType="FORWARD_ONLY" parameterType="map" resultType="HashMap">
		SELECT
			a.barcode AS s_barcode,
			ic.barcode AS i_barcode,
			ic.container_id,
			ic.path_cache AS path
		FROM (
			SELECT barcode
			FROM audit
			WHERE audit_group_id = #{audit_group_id}
		) AS a
		FULL OUTER JOIN (
			SELECT DISTINCT ON (barcode) *
			FROM (
				SELECT DISTINCT
					COALESCE(i.barcode, i.alt_barcode) AS barcode,
					c.container_id,
					c.path_cache
				FROM inventory AS i
				LEFT OUTER JOIN container AS c
					ON c.container_id = i.container_id
				WHERE i.active AND (
					<if test="container_id != null">
					i.container_id = #{container_id} OR
					</if>
					COALESCE(i.barcode, i.alt_barcode) IN (
						SELECT barcode
						FROM audit
						WHERE audit_group_id = #{audit_group_id}
					)
				)
				
				UNION
				
				SELECT DISTINCT
					COALESCE(c.barcode, c.alt_barcode) AS barcode,
					cc.container_id,
					cc.path_cache
				FROM container AS c
				LEFT OUTER JOIN container AS cc
					ON cc.container_id = c.parent_container_id
				WHERE c.active AND (
					<if test="container_id != null">
					c.parent_container_id = #{container_id} OR
					</if>
					COALESCE(c.barcode, c.alt_barcode) IN (
						SELECT barcode
						FROM audit
						WHERE audit_group_id = #{audit_group_id}
					)
				)
			) AS q
			ORDER BY barcode
				<if test="container_id != null">
				,container_id = #{container_id} DESC
				</if>
		) AS ic ON ic.barcode = a.barcode
		ORDER BY a.barcode, ic.barcode
	</select>
</mapper>
