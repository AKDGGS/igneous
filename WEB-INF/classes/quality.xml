<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="gov.alaska.dggs.igneous.Quality">
	<!-- 
		This file contains all the queries used to render
		reports for the quality assurance report. If the query
		is succesful, it should return no results. Each returned
		row represents a single error.

		For display purposes, all the reports listed here must return
		an "id" field, and a "desc" field. The contents of these fields
		are optional, and merely used to aide the user in tracking down
		the sources of problems. You may populate them with whatever you
		want.

		Each function here must have a corresponding count function, that
		returns the count as a total number of errors returned.

		The queries listed here must corrospond to the reported listed
		in QualityServlet.java found in the source directory.
	-->
	<sql id="SeparatedBarcodes">
		SELECT barcode AS id,
			STRING_AGG(path_cache, ', ') AS desc
		FROM (
			SELECT DISTINCT COALESCE(iv.barcode, iv.alt_barcode) AS barcode,
				iv.container_id, co.path_cache
			FROM inventory AS iv
			JOIN container AS co
				ON co.container_id = iv.container_id
			WHERE iv.active AND (iv.barcode IS NOT NULL
				OR iv.alt_barcode IS NOT NULL)
				AND POSITION('MSLIDE' IN co.path_cache) = 0
		) AS q1
		GROUP BY barcode
		HAVING COUNT(DISTINCT container_id) &gt; 1
	</sql>
	<select id="getSeparatedBarcodes" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="SeparatedBarcodes" />
	</select>
	<select id="getSeparatedBarcodesCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="SeparatedBarcodes" />) AS q
	</select>


	<sql id="InventoryInvalidBarcode">
		SELECT inventory_id AS id,
			('alt_barcode: ' || alt_barcode) AS desc
		FROM inventory
		WHERE alt_barcode !~* '^[a-z \-\d+]+$'
			AND active


		UNION ALL

		SELECT inventory_id AS id,
			('barcode: ' || barcode) AS desc
		FROM inventory
		WHERE barcode !~* '^[a-z \-\d+]+$'
			AND active
	</sql>
	<select id="getInventoryInvalidBarcode" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="InventoryInvalidBarcode" />
	</select>
	<select id="getInventoryInvalidBarcodeCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="InventoryInvalidBarcode" />) AS q
	</select>


	<sql id="ContainerInvalidBarcode">
		SELECT container_id AS id,
			('alt_barcode: ' || alt_barcode) AS desc
		FROM container
		WHERE alt_barcode !~* '^[a-z\-\d+]+$'

		UNION ALL

		SELECT container_id AS id,
			('barcode: ' || barcode) AS desc
		FROM container
		WHERE barcode !~* '^[a-z\-\d+]+$'
	</sql>
	<select id="getContainerInvalidBarcode" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="ContainerInvalidBarcode" />
	</select>
	<select id="getContainerInvalidBarcodeCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="ContainerInvalidBarcode" />) AS q
	</select>


	<sql id="MissingMetadata">
		SELECT iv.inventory_id AS id, 
			COALESCE(iv.barcode, iv.alt_barcode, '') || ' ' || COALESCE(co.path_cache, '') AS desc
		FROM inventory AS iv
		LEFT OUTER JOIN container AS co
			ON co.container_id = iv.inventory_id
		LEFT OUTER JOIN inventory_well AS ivw
			ON ivw.inventory_id = iv.inventory_id
		LEFT OUTER JOIN inventory_borehole AS ivb
			ON ivb.inventory_id = iv.inventory_id
		LEFT OUTER JOIN inventory_outcrop AS ivo
			ON ivo.inventory_id = iv.inventory_id
		LEFT OUTER JOIN inventory_shotpoint AS ivs
			ON ivs.inventory_id = iv.inventory_id
		LEFT OUTER JOIN inventory_publication AS ivp
			ON ivp.inventory_id = iv.inventory_id
		WHERE iv.active
			AND ivw.inventory_id IS NULL
			AND ivb.inventory_id IS NULL
			AND ivo.inventory_id IS NULL
			AND ivs.inventory_id IS NULL
			AND ivp.inventory_id IS NULL
	</sql>
	<select id="getMissingMetadata" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="MissingMetadata" />
	</select>
	<select id="getMissingMetadataCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="MissingMetadata" />) AS q
	</select>


	<sql id="MissingMetadataNoBLM">
		SELECT iv.inventory_id AS id, 
			COALESCE(iv.barcode, iv.alt_barcode, '') || ' ' || COALESCE(co.path_cache, '') AS desc
		FROM inventory AS iv
		LEFT OUTER JOIN container AS co
			ON co.container_id = iv.inventory_id
		LEFT OUTER JOIN inventory_well AS ivw
			ON ivw.inventory_id = iv.inventory_id
		LEFT OUTER JOIN inventory_borehole AS ivb
			ON ivb.inventory_id = iv.inventory_id
		LEFT OUTER JOIN inventory_outcrop AS ivo
			ON ivo.inventory_id = iv.inventory_id
		LEFT OUTER JOIN inventory_shotpoint AS ivs
			ON ivs.inventory_id = iv.inventory_id
		LEFT OUTER JOIN inventory_publication AS ivp
			ON ivp.inventory_id = iv.inventory_id
		WHERE iv.active
			AND ivw.inventory_id IS NULL
			AND ivb.inventory_id IS NULL
			AND ivo.inventory_id IS NULL
			AND ivs.inventory_id IS NULL
			AND ivp.inventory_id IS NULL
			AND iv.collection_id &lt;&gt; (
				SELECT collection_id
				FROM collection
				WHERE name = 'BLM'
				LIMIT 1
			)
	</sql>
	<select id="getMissingMetadataNoBLM" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="MissingMetadataNoBLM" />
	</select>
	<select id="getMissingMetadataNoBLMCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="MissingMetadataNoBLM" />) AS q
	</select>


	<sql id="MissingContainer">
		SELECT iv.inventory_id AS id,
			COALESCE(iv.barcode, iv.alt_barcode, '') AS desc
		FROM inventory AS iv
		LEFT OUTER JOIN container AS co
			ON co.container_id = iv.container_id
		WHERE iv.active AND iv.container_id IS NULL
	</sql>
	<select id="getMissingContainer" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="MissingContainer" />
	</select>
	<select id="getMissingContainerCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="MissingContainer" />) AS q
	</select>


	<sql id="BarcodeOverlap">
		SELECT REGEXP_REPLACE(barcode, 'GMC-{0,1}(\d+)', '\1') AS id, '' AS desc
		FROM inventory
		WHERE active AND POSITION('-' IN barcode) &lt;&gt; 0

		INTERSECT

		SELECT REGEXP_REPLACE(barcode, 'GMC-{0,1}(\d+)', '\1') AS id, '' AS desc
		FROM inventory
		WHERE active AND POSITION('-' IN barcode) = 0
	</sql>
	<select id="getBarcodeOverlap" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="BarcodeOverlap" />
	</select>
	<select id="getBarcodeOverlapCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="BarcodeOverlap" />) AS q
	</select>


	<sql id="WellNumberEmpty">
		SELECT well_id AS id, name AS desc
		FROM well
		WHERE (
				well_number IS NULL OR LENGTH(TRIM(BOTH FROM well_number)) = 0
			) AND well_id IN (
				SELECT DISTINCT well_id
				FROM inventory_well AS iw
				JOIN inventory AS i
					ON i.inventory_id = iw.inventory_id
				WHERE active
			)
	</sql>
	<select id="getWellNumberEmpty" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="WellNumberEmpty" />
	</select>
	<select id="getWellNumberEmptyCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="WellNumberEmpty" />) AS q
	</select>


	<sql id="APIBadLength">
		SELECT well_id AS id, name AS desc
		FROM well
		WHERE api_number IS NOT NULL
			AND LENGTH(api_number) &lt;&gt; 14
	</sql>
	<select id="getAPIBadLength" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="APIBadLength" />
	</select>
	<select id="getAPIBadLengthCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="APIBadLength" />) AS q
	</select>


	<sql id="APIDuplicate">
		SELECT api_number AS id,
			STRING_AGG(well_id::TEXT, ',') AS desc
		FROM well
		WHERE api_number IS NOT NULL
		GROUP BY api_number
		HAVING COUNT(*) > 1
	</sql>
	<select id="getAPIDuplicate" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="APIDuplicate" />
	</select>
	<select id="getAPIDuplicateCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="APIDuplicate" />) AS q
	</select>


	<sql id="BottomOverTop">
		SELECT inventory_id AS id, COALESCE(barcode, alt_barcode) AS desc
		FROM inventory
		WHERE active
			AND interval_top IS NOT NULL
			AND interval_bottom IS NOT NULL
			AND interval_bottom &lt; interval_top
	</sql>
	<select id="getBottomOverTop" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="BottomOverTop" />
	</select>
	<select id="getBottomOverTopCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="BottomOverTop" />) AS q
	</select>


	<sql id="WellNoSpatial">
		SELECT well_id, name AS desc
		FROM well
		WHERE well_id NOT IN (
			SELECT well_id
			FROM well_point
		) AND well_id NOT IN (
			SELECT well_id
			FROM well_place AS wp
			JOIN place AS pl
				ON pl.place_id = wp.place_id
			WHERE pl.geog IS NOT NULL
		)
		ORDER BY well_id
	</sql>
	<select id="getWellNoSpatial" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="WellNoSpatial" />
	</select>
	<select id="getWellNoSpatialCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="WellNoSpatial" />) AS q
	</select>


	<sql id="BoreholeNoSpatial">
		SELECT borehole_id AS id, name AS desc
		FROM borehole
		WHERE borehole_id NOT IN (
			SELECT borehole_id
			FROM borehole_point
		)
	</sql>
	<select id="getBoreholeNoSpatial" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="BoreholeNoSpatial" />
	</select>
	<select id="getBoreholeNoSpatialCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="BoreholeNoSpatial" />) AS q
	</select>


	<sql id="OutcropNoSpatial">
		SELECT outcrop_id AS id, name AS desc
		FROM outcrop
		WHERE outcrop_id NOT IN (
			SELECT outcrop_id
			FROM outcrop_point
		) AND outcrop_id NOT IN (
			SELECT op.outcrop_id
			FROM outcrop_place AS op
			JOIN place AS pl
				ON pl.place_id = op.place_id
			WHERE pl.geog IS NOT NULL
		) AND outcrop_id NOT IN (
			SELECT op.outcrop_id
			FROM outcrop_plss AS op
			JOIN plss AS pl
				ON pl.plss_id = op.plss_id
			WHERE pl.geog IS NOT NULL
		) AND outcrop_id NOT IN (
			SELECT oq.outcrop_id
			FROM outcrop_quadrangle AS oq
			JOIN quadrangle AS qu
				ON qu.quadrangle_id = oq.quadrangle_id
			WHERE qu.geog IS NOT NULL
		)
	</sql>
	<select id="getOutcropNoSpatial" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="OutcropNoSpatial" />
	</select>
	<select id="getOutcropNoSpatialCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="OutcropNoSpatial" />) AS q
	</select>


	<sql id="ShotpointNoSpatial">
		SELECT shotpoint_id AS id, shotpoint_number AS desc
		FROM shotpoint
		WHERE shotpoint_id NOT IN (
			SELECT shotpoint_id
			FROM shotpoint_point
		)
	</sql>
	<select id="getShotpointNoSpatial" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="ShotpointNoSpatial" />
	</select>
	<select id="getShotpointNoSpatialCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="ShotpointNoSpatial" />) AS q
	</select>


	<sql id="OutcropInventoryNoSampleNumber">
		SELECT io.inventory_id AS id,
			COALESCE(iv.barcode, iv.alt_barcode) AS desc
		FROM inventory_outcrop AS io
		JOIN inventory AS iv ON iv.inventory_id = io.inventory_id
		WHERE iv.active
			AND (iv.sample_number IS NULL
			OR LENGTH(TRIM(BOTH FROM iv.sample_number)) = 0)
	</sql>
	<select id="getOutcropInventoryNoSampleNumber" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="OutcropInventoryNoSampleNumber" />
	</select>
	<select id="getOutcropInventoryNoSampleNumberCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="OutcropInventoryNoSampleNumber" />) AS q
	</select>


	<sql id="MissingBarcode">
		SELECT i.inventory_id AS id,
			COALESCE(c.path_cache, '') || ' ' || COALESCE(i.remark, '') AS desc
		FROM inventory AS i
		LEFT OUTER JOIN container AS c
			ON c.container_id = i.container_id
		WHERE i.active AND 
			COALESCE(i.barcode, i.alt_barcode, c.barcode, c.alt_barcode) IS NULL
	</sql>
	<select id="getMissingBarcode" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="MissingBarcode" />
	</select>
	<select id="getMissingBarcodeCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="MissingBarcode" />) AS q
	</select>


	<sql id="InventoryDeeperThanWell">
		SELECT iw.inventory_id AS id,
			iv.interval_bottom || ' &gt; ' ||
			GREATEST(we.measured_depth, we.vertical_depth) AS desc
		FROM inventory_well AS iw
		JOIN inventory AS iv ON iv.inventory_id = iw.inventory_id
		JOIN well AS we ON we.well_id = iw.well_id
		WHERE iv.active
			AND iv.interval_bottom IS NOT NULL
			AND COALESCE(we.measured_depth, we.vertical_depth) IS NOT NULL
			AND GREATEST(we.measured_depth, we.vertical_depth) &lt; iv.interval_bottom 
		ORDER BY (
				iv.interval_bottom - GREATEST(we.measured_depth, we.vertical_depth)
			) DESC
	</sql>
	<select id="getInventoryDeeperThanWell" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="InventoryDeeperThanWell" />
	</select>
	<select id="getInventoryDeeperThanWellCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="InventoryDeeperThanWell" />) AS q
	</select>


	<sql id="WellWithNoInventory">
		SELECT well_id AS id, name AS desc
		FROM well
		WHERE well_id NOT IN (
			SELECT DISTINCT well_id
			FROM inventory_well AS iw
			JOIN inventory AS i
				ON i.inventory_id = iw.inventory_id
			WHERE i.active
		)
	</sql>
	<select id="getWellWithNoInventory" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="WellWithNoInventory" />
	</select>
	<select id="getWellWithNoInventoryCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="WellWithNoInventory" />) AS q
	</select>


	<sql id="BoreholeWithNoInventory">
		SELECT borehole_id AS id,
			CASE WHEN p.name IS NOT NULL
			THEN p.name || ' - '
			ELSE '' END || b.name AS desc
		FROM borehole AS b
		LEFT OUTER JOIN prospect AS p
			ON p.prospect_id = b.prospect_id
		WHERE borehole_id NOT IN (
			SELECT DISTINCT borehole_id
			FROM inventory_borehole AS ib
			JOIN inventory AS i
				ON i.inventory_id = ib.inventory_id
			WHERE i.active
		)	
	</sql>
	<select id="getBoreholeWithNoInventory" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="BoreholeWithNoInventory" />
	</select>
	<select id="getBoreholeWithNoInventoryCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="BoreholeWithNoInventory" />) AS q
	</select>


	<sql id="OutcropWithNoInventory">
		SELECT o.outcrop_id AS id, o.name AS desc
		FROM outcrop AS o
		LEFT OUTER JOIN inventory_outcrop AS io
			ON io.outcrop_id = o.outcrop_id
			WHERE io.outcrop_id IS NULL
	</sql>
	<select id="getOutcropWithNoInventory" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="OutcropWithNoInventory" />
	</select>
	<select id="getOutcropWithNoInventoryCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="OutcropWithNoInventory" />) AS q
	</select>


	<sql id="ShotpointWithNoInventory">
		SELECT sp.shotpoint_id AS id,
			sl.name ||
			CASE WHEN sp.shotpoint_number IS NOT NULL
			THEN ' - ' || sp.shotpoint_number
			ELSE '' END AS desc
		FROM shotpoint AS sp
		JOIN shotline AS sl
			ON sl.shotline_id = sp.shotline_id
		WHERE shotpoint_id NOT IN (
			SELECT DISTINCT iss.shotpoint_id
			FROM inventory_shotpoint AS iss
			JOIN inventory AS i
				ON i.inventory_id = iss.inventory_id
			WHERE i.active
		)
	</sql>
	<select id="getShotpointWithNoInventory" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="ShotpointWithNoInventory" />
	</select>
	<select id="getShotpointWithNoInventoryCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="ShotpointWithNoInventory" />) AS q
	</select>


	<sql id="ProspectWithNoBorehole">
		SELECT prospect_id AS id, name AS desc
		FROM prospect
		WHERE prospect_id NOT IN (
			SELECT DISTINCT prospect_id FROM borehole
		)
	</sql>
	<select id="getProspectWithNoBorehole" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="ProspectWithNoBorehole" />
	</select>
	<select id="getProspectWithNoBoreholeCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="ProspectWithNoBorehole" />) AS q
	</select>


	<sql id="OrphanedOrganizations">
		SELECT organization_id AS id, name AS desc
		FROM organization
		WHERE organization_id NOT IN (
			SELECT DISTINCT organization_id
			FROM borehole_organization
		) AND organization_id NOT IN (
			SELECT DISTINCT organization_id
			FROM outcrop_organization
		) AND organization_id NOT IN (
			SELECT DISTINCT organization_id
			FROM person_organization
		) AND organization_id NOT IN (
			SELECT DISTINCT organization_id
			FROM publication_organization
		) AND organization_id NOT IN (
			SELECT DISTINCT organization_id
			FROM well_stratigraphy_organization
		) AND organization_id NOT IN (
			SELECT DISTINCT organization_id
			FROM well_operator
		) AND organization_id NOT IN (
			SELECT DISTINCT organization_id
			FROM project
		) AND organization_id NOT IN (
			SELECT DISTINCT organization_id
			FROM collection
		)
	</sql>
	<select id="getOrphanedOrganizations" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="OrphanedOrganizations" />
	</select>
	<select id="getOrphanedOrganizationsCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="OrphanedOrganizations" />) AS q
	</select>


	<sql id="DuplicateContainers">
		SELECT path_cache AS id, COUNT(*) AS desc
		FROM container
		WHERE active
		GROUP BY path_cache
		HAVING COUNT(*) > 1
	</sql>
	<select id="getDuplicateContainers" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="DuplicateContainers" />
	</select>
	<select id="getDuplicateContainersCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="DuplicateContainers" />) AS q
	</select>


	<sql id="EmptyInventoryBarcode">
		SELECT inventory_id AS id, remark AS desc
		FROM inventory
		WHERE active AND (
			barcode IS NOT NULL OR alt_barcode IS NOT NULL
		) AND (
			LENGTH(TRIM(BOTH FROM barcode)) = 0
			OR LENGTH(TRIM(BOTH FROM alt_barcode)) = 0
		)
	</sql>
	<select id="getEmptyInventoryBarcode" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="EmptyInventoryBarcode" />
	</select>
	<select id="getEmptyInventoryBarcodeCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="EmptyInventoryBarcode" />) AS q
	</select>


	<sql id="EmptyContainerBarcode">
		SELECT container_id AS id, path_cache AS desc
		FROM container
		WHERE active AND (
			barcode IS NOT NULL OR alt_barcode IS NOT NULL
		) AND (
			LENGTH(TRIM(BOTH FROM barcode)) = 0
			OR LENGTH(TRIM(BOTH FROM alt_barcode)) = 0
		)
	</sql>
	<select id="getEmptyContainerBarcode" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="EmptyContainerBarcode" />
	</select>
	<select id="getEmptyContainerBarcodeCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="EmptyContainerBarcode" />) AS q
	</select>


	<sql id="InventoryContainerBarcode">
		SELECT i.barcode AS id,
			('inventory_id: ' || i.inventory_id || ' '
			'container_id: ' || c.container_id) AS desc
		FROM inventory AS i
		JOIN container AS c
			ON COALESCE(c.barcode, c.alt_barcode) = COALESCE(i.barcode, i.alt_barcode)
		WHERE i.active AND c.active
	</sql>
	<select id="getInventoryContainerBarcode" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="InventoryContainerBarcode" />
	</select>
	<select id="getInventoryContainerBarcodeCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="InventoryContainerBarcode" />) AS q
	</select>


	<sql id="InventoryWithNoKeywords">
		SELECT inventory_id AS id,
			COALESCE(co.name || ' ', '')  ||
			COALESCE(c.path_cache, '') AS desc
		FROM inventory AS i
		LEFT OUTER JOIN container AS c
			ON c.container_id = i.container_id
			AND c.active
		LEFT OUTER JOIN collection AS co
			ON co.collection_id = i.collection_id
		WHERE i.active AND i.keywords IS NULL
	</sql>
	<select id="getInventoryWithNoKeywords" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="InventoryWithNoKeywords" />
	</select>
	<select id="getInventoryWithNoKeywordsCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="InventoryWithNoKeywords" />) AS q
	</select>


	<sql id="OrphanedPoints">
		SELECT point_id AS id,
			description AS desc
		FROM point
		WHERE point_id NOT IN (
			SELECT point_id
			FROM borehole_point
		) AND point_id NOT IN (
			SELECT point_id
			FROM outcrop_point
		) AND point_id NOT IN (
			SELECT point_id
			FROM shotpoint_point
		) AND point_id NOT IN (
			SELECT point_id
			FROM well_point
		)
	</sql>
	<select id="getOrphanedPoints" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="OrphanedPoints" />
	</select>
	<select id="getOrphanedPointsCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="OrphanedPoints" />) AS q
	</select>


	<sql id="OrphanedNotes">
		SELECT n.note_id AS id,
			(n.username || ', ' || n.note_date) AS desc
		FROM note AS n
		LEFT OUTER JOIN borehole_note AS nob
			ON nob.note_id = n.note_id
		LEFT OUTER JOIN inventory_note AS noi
			ON noi.note_id = n.note_id
		LEFT OUTER JOIN outcrop_note AS noo
			ON noo.note_id = n.note_id
		LEFT OUTER JOIN publication_note AS nop
			ON nop.note_id = n.note_id
		LEFT OUTER JOIN shotline_note AS nos
			ON nos.note_id = n.note_id
		LEFT OUTER JOIN well_note AS now
			ON now.note_id = n.note_id
		LEFT OUTER JOIN sample_note AS noa
			ON noa.note_id = n.note_id
		WHERE nob.note_id IS NULL
			AND noi.note_id IS NULL
			AND noo.note_id IS NULL
			AND nop.note_id IS NULL
			AND nos.note_id IS NULL
			AND now.note_id IS NULL
			AND noa.note_id IS NULL
	</sql>
	<select id="getOrphanedNotes" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="OrphanedNotes" />
	</select>
	<select id="getOrphanedNotesCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="OrphanedNotes" />) AS q
	</select>


	<sql id="OrphanedFiles">
		SELECT file_id AS id,
			filename AS desc
		FROM file
		WHERE file_id NOT IN (
			SELECT file_id
			FROM borehole_file
		) AND file_id NOT IN (
			SELECT file_id
			FROM inventory_file
		) AND file_id NOT IN (
			SELECT file_id
			FROM outcrop_file
		) AND file_id NOT IN (
			SELECT file_id
			FROM container_file
		) AND file_id NOT IN (
			SELECT file_id
			FROM prospect_file
		) AND file_id NOT IN (
			SELECT file_id
			FROM sample_file
		) AND file_id NOT IN (
			SELECT file_id
			FROM well_file
		)
	</sql>
	<select id="getOrphanedFiles" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="OrphanedFiles" />
	</select>
	<select id="getOrphanedFilesCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="OrphanedFiles" />) AS q
	</select>
</mapper>
