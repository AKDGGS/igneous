<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="gov.alaska.dggs.igneous.Quality">
	<!-- 
		This file contains all the queries used to render
		reports for the quality assurance report. If the query
		is succesful, it should return no results. Each returned
		row represents a single error.

		For display purposes, all the reports listed here must return
		an "id" field, and a "desc" field. The contents of these fields
		are optional, and merely used to aide the user in tracking down
		the sources of problems. You may populate them with whatever you
		want.

		Each function here must have a corresponding count function, that
		returns the count as a total number of errors returned.

		The queries listed here must corrospond to the reported listed
		in QualityServlet.java found in the source directory.
	-->
	<sql id="MissingBranch">
		SELECT iv.inventory_id AS id,
			COALESCE(iv.barcode, iv.alt_barcode, '') || ' ' || COALESCE(co.path_cache, '') AS desc
		FROM inventory AS iv
		LEFT OUTER JOIN container AS co
			ON co.container_id = iv.container_id
		WHERE iv.active = true AND iv.inventory_id NOT IN (
			SELECT inventory_id
			FROM inventory_keyword AS ik
			JOIN keyword AS k
				ON ik.keyword_id = k.keyword_id
			WHERE k.keyword_group_id = (
				SELECT keyword_group_id
				FROM keyword_group
				WHERE name = 'branch'
			)
		)
	</sql>
	<select id="getMissingBranch" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="MissingBranch" />
	</select>
	<select id="getMissingBranchCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="MissingBranch" />) AS q
	</select>


	<sql id="MissingType">
		SELECT iv.inventory_id AS id,
			COALESCE(iv.barcode, iv.alt_barcode, '') || ' ' || COALESCE(co.path_cache, '') AS desc
		FROM inventory AS iv
		LEFT OUTER JOIN container AS co
			ON co.container_id = iv.container_id
		WHERE iv.active = true AND iv.inventory_id NOT IN (
			SELECT inventory_id
			FROM inventory_keyword AS ik
			JOIN keyword AS k
				ON ik.keyword_id = k.keyword_id
			WHERE k.keyword_group_id = (
				SELECT keyword_group_id
				FROM keyword_group
				WHERE name = 'type'
			)
		)
	</sql>
	<select id="getMissingType" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="MissingType" />
	</select>
	<select id="getMissingTypeCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="MissingType" />) AS q
	</select>


	<sql id="SeparatedBarcodes">
		SELECT barcode AS id,
			STRING_AGG(path_cache, ', ') AS desc
		FROM (
			SELECT DISTINCT COALESCE(iv.barcode, iv.alt_barcode) AS barcode,
				iv.container_id, co.path_cache
			FROM inventory AS iv
			JOIN container AS co
				ON co.container_id = iv.container_id
			WHERE iv.active = true AND (iv.barcode IS NOT NULL
				OR iv.alt_barcode IS NOT NULL)
				AND POSITION('MSLIDE' IN co.path_cache) = 0
		) AS q1
		GROUP BY barcode
		HAVING COUNT(DISTINCT container_id) &gt; 1
	</sql>
	<select id="getSeparatedBarcodes" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="SeparatedBarcodes" />
	</select>
	<select id="getSeparatedBarcodesCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="SeparatedBarcodes" />) AS q
	</select>


	<sql id="MissingMetadata">
		SELECT iv.inventory_id AS id, 
			COALESCE(iv.barcode, iv.alt_barcode, '') || ' ' || COALESCE(co.path_cache, '') AS desc
		FROM inventory AS iv
		LEFT OUTER JOIN container AS co
			ON co.container_id = iv.inventory_id
		WHERE iv.active = true AND iv.inventory_id NOT IN (
			SELECT inventory_id
			FROM inventory_well
			
			UNION ALL
			
			SELECT inventory_id
			FROM inventory_borehole
			
			UNION ALL
			
			SELECT inventory_id
			FROM inventory_outcrop
			
			UNION ALL
			
			SELECT inventory_id
			FROM inventory_shotpoint

			UNION ALL

			SELECT inventory_id
			FROM inventory_publication
		)
	</sql>
	<select id="getMissingMetadata" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="MissingMetadata" />
	</select>
	<select id="getMissingMetadataCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="MissingMetadata" />) AS q
	</select>


	<sql id="MissingMetadataNoBLM">
		SELECT iv.inventory_id AS id, 
			COALESCE(iv.barcode, iv.alt_barcode, '') || ' ' || COALESCE(co.path_cache, '') AS desc
		FROM inventory AS iv
		LEFT OUTER JOIN container AS co
			ON co.container_id = iv.inventory_id
		WHERE iv.active = true AND iv.inventory_id NOT IN (
			SELECT inventory_id
			FROM inventory_well
			
			UNION ALL
			
			SELECT inventory_id
			FROM inventory_borehole
			
			UNION ALL
			
			SELECT inventory_id
			FROM inventory_outcrop
			
			UNION ALL
			
			SELECT inventory_id
			FROM inventory_shotpoint

			UNION ALL

			SELECT inventory_id
			FROM inventory_publication
		) AND iv.collection_id &lt;&gt; (
			SELECT collection_id
			FROM collection
			WHERE name = 'BLM'
			LIMIT 1
		)
	</sql>
	<select id="getMissingMetadataNoBLM" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="MissingMetadataNoBLM" />
	</select>
	<select id="getMissingMetadataNoBLMCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="MissingMetadataNoBLM" />) AS q
	</select>


	<sql id="MissingContainer">
		SELECT iv.inventory_id AS id,
			COALESCE(iv.barcode, iv.alt_barcode, '') AS desc
		FROM inventory AS iv
		LEFT OUTER JOIN container AS co
			ON co.container_id = iv.container_id
		WHERE iv.container_id IS NULL AND iv.active = true
	</sql>
	<select id="getMissingContainer" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="MissingContainer" />
	</select>
	<select id="getMissingContainerCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="MissingContainer" />) AS q
	</select>


	<sql id="BarcodeOverlap">
		SELECT REGEXP_REPLACE(barcode, 'GMC-{0,1}(\d+)', '\1') AS id, '' AS desc
		FROM inventory
		WHERE active = true AND POSITION('-' IN barcode) &lt;&gt; 0

		INTERSECT

		SELECT REGEXP_REPLACE(barcode, 'GMC-{0,1}(\d+)', '\1') AS id, '' AS desc
		FROM inventory
		WHERE active = true AND POSITION('-' IN barcode) = 0
	</sql>
	<select id="getBarcodeOverlap" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="BarcodeOverlap" />
	</select>
	<select id="getBarcodeOverlapCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="BarcodeOverlap" />) AS q
	</select>


	<sql id="WellNumberEmpty">
		SELECT well_id AS id, name AS desc
		FROM well
		WHERE (
				well_number IS NULL OR LENGTH(TRIM(BOTH FROM well_number)) = 0
			) AND well_id IN (SELECT DISTINCT well_id FROM inventory_well)
	</sql>
	<select id="getWellNumberEmpty" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="WellNumberEmpty" />
	</select>
	<select id="getWellNumberEmptyCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="WellNumberEmpty" />) AS q
	</select>


	<sql id="APIBadLength">
		SELECT well_id AS id, name AS desc
		FROM well
		WHERE api_number IS NOT NULL
			AND LENGTH(api_number) &lt;&gt; 14
	</sql>
	<select id="getAPIBadLength" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="APIBadLength" />
	</select>
	<select id="getAPIBadLengthCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="APIBadLength" />) AS q
	</select>


	<sql id="BottomOverTop">
		SELECT inventory_id AS id, COALESCE(barcode, alt_barcode) AS desc
		FROM inventory
		WHERE active = true
			AND interval_top IS NOT NULL
			AND interval_bottom IS NOT NULL
			AND interval_bottom &lt; interval_top
	</sql>
	<select id="getBottomOverTop" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="BottomOverTop" />
	</select>
	<select id="getBottomOverTopCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="BottomOverTop" />) AS q
	</select>


	<sql id="WellNoSpatial">
		SELECT well_id AS id, name AS desc
		FROM well
		WHERE well_id NOT IN (
			SELECT well_id FROM well_geog
		) AND well_id IN (
			SELECT DISTINCT well_id FROM inventory_well
		)
	</sql>
	<select id="getWellNoSpatial" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="WellNoSpatial" />
	</select>
	<select id="getWellNoSpatialCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="WellNoSpatial" />) AS q
	</select>


	<sql id="BoreholeNoSpatial">
		SELECT borehole_id AS id, name AS desc
		FROM borehole
		WHERE borehole_id NOT IN (
			SELECT borehole_id FROM borehole_geog
		)
	</sql>
	<select id="getBoreholeNoSpatial" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="BoreholeNoSpatial" />
	</select>
	<select id="getBoreholeNoSpatialCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="BoreholeNoSpatial" />) AS q
	</select>


	<sql id="OutcropNoSpatial">
		SELECT outcrop_id AS id, name AS desc
		FROM outcrop
		WHERE outcrop_id NOT IN (
			SELECT outcrop_id FROM outcrop_geog
		)
	</sql>
	<select id="getOutcropNoSpatial" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="OutcropNoSpatial" />
	</select>
	<select id="getOutcropNoSpatialCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="OutcropNoSpatial" />) AS q
	</select>


	<sql id="ShotpointNoSpatial">
		SELECT shotpoint_id AS id, shotpoint_number AS desc
		FROM shotpoint
		WHERE shotpoint_id NOT IN (
			SELECT shotpoint_id FROM shotpoint_geog
		)
	</sql>
	<select id="getShotpointNoSpatial" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="ShotpointNoSpatial" />
	</select>
	<select id="getShotpointNoSpatialCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="ShotpointNoSpatial" />) AS q
	</select>


	<sql id="OutcropInventoryNoSampleNumber">
		SELECT io.inventory_id AS id,
			COALESCE(iv.barcode, iv.alt_barcode) AS desc
		FROM inventory_outcrop AS io
		JOIN inventory AS iv ON iv.inventory_id = io.inventory_id
		WHERE iv.active = true
			AND (iv.sample_number IS NULL
			OR LENGTH(TRIM(BOTH FROM iv.sample_number)) = 0)
	</sql>
	<select id="getOutcropInventoryNoSampleNumber" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="OutcropInventoryNoSampleNumber" />
	</select>
	<select id="getOutcropInventoryNoSampleNumberCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="OutcropInventoryNoSampleNumber" />) AS q
	</select>


	<sql id="MissingBarcode">
		SELECT i.inventory_id AS id,
			COALESCE(c.path_cache, '') || ' ' || COALESCE(i.remark, '') AS desc
		FROM inventory AS i
		LEFT OUTER JOIN container AS c
			ON c.container_id = i.container_id
		WHERE i.active AND 
			COALESCE(i.barcode, i.alt_barcode, c.barcode, c.alt_barcode) IS NULL
	</sql>
	<select id="getMissingBarcode" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="MissingBarcode" />
	</select>
	<select id="getMissingBarcodeCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="MissingBarcode" />) AS q
	</select>


	<sql id="InventoryDeeperThanWell">
		SELECT iw.inventory_id AS id,
			iv.interval_bottom || ' &gt; ' ||
			GREATEST(we.measured_depth, we.vertical_depth) AS desc
		FROM inventory_well AS iw
		JOIN inventory AS iv ON iv.inventory_id = iw.inventory_id
		JOIN well AS we ON we.well_id = iw.well_id
		WHERE iv.active = true
			AND iv.interval_bottom IS NOT NULL
			AND COALESCE(we.measured_depth, we.vertical_depth) IS NOT NULL
			AND GREATEST(we.measured_depth, we.vertical_depth) &lt; iv.interval_bottom 
		ORDER BY (
				iv.interval_bottom - GREATEST(we.measured_depth, we.vertical_depth)
			) DESC
	</sql>
	<select id="getInventoryDeeperThanWell" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="InventoryDeeperThanWell" />
	</select>
	<select id="getInventoryDeeperThanWellCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="InventoryDeeperThanWell" />) AS q
	</select>


	<sql id="WellWithNoInventory">
		SELECT well_id AS id, name AS desc
		FROM well
		WHERE well_id NOT IN (
			SELECT DISTINCT well_id FROM inventory_well
		)
	</sql>
	<select id="getWellWithNoInventory" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="WellWithNoInventory" />
	</select>
	<select id="getWellWithNoInventoryCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="WellWithNoInventory" />) AS q
	</select>


	<sql id="BoreholeWithNoInventory">
		SELECT borehole_id AS id,
			CASE WHEN p.name IS NOT NULL
			THEN p.name || ' - '
			ELSE '' END || b.name AS desc
		FROM borehole AS b
		LEFT OUTER JOIN prospect AS p
			ON p.prospect_id = b.prospect_id
		WHERE borehole_id NOT IN (
			SELECT DISTINCT borehole_id FROM inventory_borehole
		)	
	</sql>
	<select id="getBoreholeWithNoInventory" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="BoreholeWithNoInventory" />
	</select>
	<select id="getBoreholeWithNoInventoryCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="BoreholeWithNoInventory" />) AS q
	</select>


	<sql id="OutcropWithNoInventory">
		SELECT outcrop_id AS id, name AS desc
		FROM outcrop
		WHERE outcrop_id NOT IN (
			SELECT DISTINCT outcrop_id FROM inventory_outcrop
		)
	</sql>
	<select id="getOutcropWithNoInventory" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="OutcropWithNoInventory" />
	</select>
	<select id="getOutcropWithNoInventoryCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="OutcropWithNoInventory" />) AS q
	</select>


	<sql id="ShotpointWithNoInventory">
		SELECT sp.shotpoint_id AS id,
			sl.name ||
			CASE WHEN sp.shotpoint_number IS NOT NULL
			THEN ' - ' || sp.shotpoint_number
			ELSE '' END AS desc
		FROM shotpoint AS sp
		JOIN shotline AS sl
			ON sl.shotline_id = sp.shotline_id
		WHERE shotpoint_id NOT IN (
			SELECT DISTINCT shotpoint_id FROM inventory_shotpoint
		)
	</sql>
	<select id="getShotpointWithNoInventory" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="ShotpointWithNoInventory" />
	</select>
	<select id="getShotpointWithNoInventoryCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="ShotpointWithNoInventory" />) AS q
	</select>


	<sql id="ProspectWithNoBorehole">
		SELECT prospect_id AS id, name AS desc
		FROM prospect
		WHERE prospect_id NOT IN (
			SELECT DISTINCT prospect_id FROM borehole
		)
	</sql>
	<select id="getProspectWithNoBorehole" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="ProspectWithNoBorehole" />
	</select>
	<select id="getProspectWithNoBoreholeCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="ProspectWithNoBorehole" />) AS q
	</select>


	<sql id="OrphanedOrganizations">
		SELECT organization_id AS id, name AS desc
		FROM organization
		WHERE organization_id NOT IN (
			SELECT organization_id
			FROM borehole_organization

			UNION

			SELECT organization_id
			FROM outcrop_organization

			UNION

			SELECT organization_id
			FROM person_organization

			UNION

			SELECT organization_id
			FROM publication_organization

			UNION

			SELECT organization_id
			FROM well_stratigraphy_organization

			UNION

			SELECT organization_id
			FROM well_operator

			UNION

			SELECT organization_id
			FROM project

			UNION

			SELECT organization_id
			FROM collection
		)
	</sql>
	<select id="getOrphanedOrganizations" resultSetType="FORWARD_ONLY" resultType="Map">
		<include refid="OrphanedOrganizations" />
	</select>
	<select id="getOrphanedOrganizationsCount" resultSetType="FORWARD_ONLY" resultType="int">
		SELECT COUNT(*)
		FROM (<include refid="OrphanedOrganizations" />) AS q
	</select>

</mapper>
