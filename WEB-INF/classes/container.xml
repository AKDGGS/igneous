<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="gov.alaska.dggs.igneous.Container">
	<update id="updateBarcode" parameterType="map">
		UPDATE container SET barcode = #{new_barcode}
		WHERE barcode = #{old_barcode}
	</update>


	<update id="updateAltBarcode" parameterType="map">
		UPDATE container SET barcode = #{new_barcode}
		WHERE alt_barcode = #{old_barcode}
	</update>


	<insert id="insert" parameterType="Container" useGeneratedKeys="true" keyColumn="container_id" keyProperty="id">
		INSERT INTO container (
			container_type_id, barcode, alt_barcode, name, remark
		) VALUES (
			#{type.id}, #{barcode}, #{alt_barcode}, #{name}, #{remark}
		)
	</insert>


	<select id="getContainerIDsByBarcode" parameterType="String" resultType="Integer">
		SELECT container_id
		FROM container
		WHERE barcode = #{barcode}
			OR barcode = ('GMC-' || #{barcode})
			OR alt_barcode = #{barcode} 
	</select>


	<update id="moveContainerByBarcode" parameterType="Map">
		UPDATE container SET parent_container_id = #{container_id}
		WHERE barcode = #{barcode}
			OR barcode = ('GMC-' || #{barcode})
			OR alt_barcode = #{barcode}
	</update>


	<select id="getContainerTypeByID" parameterType="int" resultMap="ContainerTypeMap">
		SELECT container_type_id, name
		FROM container_type
		WHERE container_type_id = #{container_type_id}
	</select>


	<select id="getContainerTypeByName" parameterType="String" resultMap="ContainerTypeMap">
		SELECT container_type_id, name
		FROM container_type
		WHERE name = #{name}
		LIMIT 1
	</select>


	<resultMap id="ContainerTypeMap" type="ContainerType">
		<id property="id" column="container_type_id" />
		<result property="name" column="name" />
	</resultMap>


	<select id="getContainerTotals" parameterType="String" resultType="Map">
		SELECT path_cache AS container, total
		FROM (
			SELECT c.container_id, c.path_cache, COUNT(i.inventory_id) AS total
			FROM inventory AS i
			JOIN container AS c ON c.container_id = i.container_id
			WHERE i.active AND i.container_id IN (
				WITH RECURSIVE t AS (
					SELECT 0 AS depth, container_id
					FROM container
					WHERE active AND COALESCE(barcode, alt_barcode) = #{barcode}

					UNION ALL

					SELECT t.depth + 1 AS depth, c.container_id
					FROM container AS c
					JOIN t ON c.parent_container_id = t.container_id
					WHERE active AND depth &lt;= 25
				) SELECT container_id FROM t
			)
			GROUP BY c.container_id, c.path_cache
			LIMIT 100
		) AS q
		ORDER BY path_cache
	</select>


	<select id="getCollectionTotals" parameterType="String" resultType="Map">
		SELECT name AS collection, total
		FROM (
			SELECT co.collection_id, co.name,
				COUNT(DISTINCT COALESCE(iv.barcode, iv.alt_barcode)) AS total
			FROM inventory AS iv
			JOIN collection AS co ON co.collection_id = iv.collection_id
			WHERE iv.active AND iv.container_id IN (
				WITH RECURSIVE t AS (
					SELECT 0 AS depth, container_id
					FROM container
					WHERE active
						AND COALESCE(barcode, alt_barcode) = #{barcode}

					UNION ALL

					SELECT t.depth + 1 AS depth, c.container_id
					FROM container AS c
					JOIN t ON c.parent_container_id = t.container_id
					WHERE active AND depth &lt;= 25
				) SELECT container_id FROM t
			)
			GROUP BY co.collection_id, co.name
			LIMIT 100
		) AS q
		ORDER BY collection
	</select>


	<select id="getKeywordSummary" parameterType="String" resultType="String">
		SELECT keyword::text
		FROM (
			SELECT DISTINCT UNNEST(keywords) AS keyword
			FROM inventory
			WHERE active AND container_id IN (
				WITH RECURSIVE t AS (
					SELECT 0 AS depth, container_id
					FROM container
					WHERE active
						AND COALESCE(barcode, alt_barcode) = #{barcode}

					UNION ALL

					SELECT t.depth + 1 AS depth, c.container_id
					FROM container AS c
					JOIN t ON c.parent_container_id = t.container_id
					WHERE active AND depth &lt;= 25
				) SELECT container_id FROM t
			)
			LIMIT 100
		) AS q
		ORDER BY keyword::text
	</select>


	<select id="getWellTotals" parameterType="String" resultType="Map">
		SELECT name AS well, total
		FROM (
			SELECT we.well_id, we.name,
				COUNT(DISTINCT COALESCE(iv.barcode, iv.alt_barcode)) AS total
			FROM container AS co
			JOIN inventory AS iv ON iv.container_id = co.container_id
			JOIN inventory_well AS ivw ON ivw.inventory_id = iv.inventory_id
			JOIN well AS we ON we.well_id = ivw.well_id
			WHERE iv.active AND iv.container_id IN (
				WITH RECURSIVE t AS (
					SELECT 0 AS depth, container_id
					FROM container
					WHERE active
						AND COALESCE(barcode, alt_barcode) = #{barcode}

					UNION ALL

					SELECT t.depth + 1 AS depth, c.container_id
					FROM container AS c
					JOIN t ON c.parent_container_id = t.container_id
					WHERE active AND depth &lt;= 25
				) SELECT container_id FROM t
			)
			GROUP BY we.well_id, we.name
			LIMIT 100
		) AS q
		ORDER BY well
	</select>


	<select id="getBoreholeTotals" parameterType="String" resultType="Map">
		SELECT prospect, borehole, total
		FROM (
			SELECT ps.prospect_id, bh.borehole_id,
				ps.name AS prospect, bh.name AS borehole,
				COUNT(DISTINCT COALESCE(iv.barcode, iv.alt_barcode)) AS total
			FROM container AS co
			JOIN inventory AS iv
				ON iv.container_id = co.container_id
			JOIN inventory_borehole AS ivb
				ON ivb.inventory_id = iv.inventory_id
			JOIN borehole AS bh
				ON bh.borehole_id = ivb.borehole_id
			LEFT OUTER JOIN prospect AS ps
				ON ps.prospect_id = bh.prospect_id
			WHERE iv.active AND iv.container_id IN (
				WITH RECURSIVE t AS (
					SELECT 0 AS depth, container_id
					FROM container
					WHERE active
						AND COALESCE(barcode, alt_barcode) = #{barcode}

					UNION ALL

					SELECT t.depth + 1 AS depth, c.container_id
					FROM container AS c
					JOIN t ON c.parent_container_id = t.container_id
					WHERE active AND depth &lt;= 25
				) SELECT container_id FROM t
			)
			GROUP BY ps.prospect_id, bh.borehole_id, ps.name, bh.name
			LIMIT 100
		) AS q
		ORDER BY prospect, borehole
	</select>


	<select id="getShotlineTotals" parameterType="String" resultType="Map">
		SELECT shotline, total
		FROM (
			SELECT sl.shotline_id, sl.name AS shotline,
				COUNT(DISTINCT COALESCE(iv.barcode, iv.alt_barcode)) AS total
			FROM inventory AS iv
			JOIN inventory_shotpoint AS ivs
				ON ivs.inventory_id = iv.inventory_id
			JOIN shotpoint AS sp
				ON sp.shotpoint_id = ivs.shotpoint_id
			JOIN shotline AS sl
				ON sl.shotline_id = sp.shotline_id
			WHERE iv.active AND iv.container_id IN (
				WITH RECURSIVE t AS (
					SELECT 0 AS depth, container_id
					FROM container
					WHERE active
						AND COALESCE(barcode, alt_barcode) = 'SHF-0244'

					UNION ALL

					SELECT t.depth + 1 AS depth, c.container_id
					FROM container AS c
					JOIN t ON c.parent_container_id = t.container_id
					WHERE active AND depth &lt;= 25
				) SELECT container_id FROM t
			)
			GROUP BY sl.shotline_id, sl.name
			LIMIT 100
		) AS q
		ORDER BY shotline
	</select>


	<select id="getChildBarcodes" parameterType="Map" resultType="String">
		WITH RECURSIVE t AS (
			SELECT 0 AS depth, container_id,
				COALESCE(barcode, alt_barcode) AS barcode
			FROM container 
			WHERE active
				AND COALESCE(barcode, alt_barcode) = #{barcode}

			UNION ALL 

			SELECT t.depth + 1 AS depth, c.container_id,
				COALESCE(c.barcode, c.alt_barcode) AS barcode
			FROM container AS c
			JOIN t ON c.parent_container_id = t.container_id
			WHERE active AND depth &lt;= 25
		)
		SELECT DISTINCT barcode
		FROM (
			SELECT COALESCE(i.barcode, i.alt_barcode) AS barcode
			FROM inventory AS i
			WHERE active
				AND COALESCE(i.barcode, i.alt_barcode) IS NOT NULL
				AND i.container_id IN (SELECT container_id FROM t)

			UNION ALL 

			SELECT barcode
			FROM t
			WHERE depth &gt; 0
		) AS q
		ORDER BY barcode
		LIMIT 100
	</select>


	<select id="getContainerLogByDate" parameterType="Map" resultType="Map">
		SELECT
			i.inventory_id,
			COALESCE(i.barcode, i.alt_barcode) AS barcode,
			icl.log_date,
			COALESCE((
				SELECT destination
				FROM inventory_container_log 
				WHERE log_date &lt; icl.log_date
					AND inventory_id = inventory_id
				ORDER BY log_date DESC
				LIMIT 1
			), 'Unknown') AS src,
			icl.destination AS dst
		FROM inventory_container_log AS icl
		JOIN inventory AS i
			ON i.inventory_id = icl.inventory_id
		WHERE icl.log_date BETWEEN #{start}::timestamp AND #{end}::timestamp
		ORDER BY icl.log_date ASC
	</select>


	<select id="getContainerLogByInventoryID" parameterType="int" resultMap="ContainerLogMap">
		SELECT inventory_container_log_id, destination, log_date
		FROM inventory_container_log
		WHERE inventory_id = #{id}
		ORDER BY log_date DESC
	</select>


	<resultMap id="ContainerLogMap" type="ContainerLog">
		<id property="id" column="inventory_container_log_id" />
		<result property="destination" column="destination" />
		<result property="date" column="log_date" />
	</resultMap>
</mapper>
