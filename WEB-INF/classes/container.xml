<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="gov.alaska.dggs.igneous.Container">
	<update id="updateBarcode" parameterType="map">
		UPDATE container SET barcode = #{new_barcode}
		WHERE barcode = #{old_barcode}
	</update>


	<update id="updateAltBarcode" parameterType="map">
		UPDATE container SET barcode = #{new_barcode}
		WHERE alt_barcode = #{old_barcode}
	</update>


	<insert id="insert" parameterType="Container" useGeneratedKeys="true" keyColumn="container_id" keyProperty="id">
		INSERT INTO container (
			container_type_id, barcode, alt_barcode, name, remark
		) VALUES (
			#{type.id}, #{barcode}, #{alt_barcode}, #{name}, #{remark}
		)
	</insert>


	<select id="getContainerIDsByBarcode" parameterType="String" resultType="Integer">
		SELECT container_id
		FROM container
		WHERE barcode = #{barcode}
			OR barcode = ('GMC-' || #{barcode})
			OR alt_barcode = #{barcode} 
	</select>


	<update id="moveContainerByBarcode" parameterType="Map">
		UPDATE container SET parent_container_id = #{container_id}
		WHERE barcode = #{barcode}
			OR barcode = ('GMC-' || #{barcode})
			OR alt_barcode = #{barcode}
	</update>


	<select id="getContainerTypeByID" parameterType="int" resultMap="ContainerTypeMap">
		SELECT container_type_id, name
		FROM container_type
		WHERE container_type_id = #{container_type_id}
	</select>


	<select id="getContainerTypeByName" parameterType="String" resultMap="ContainerTypeMap">
		SELECT container_type_id, name
		FROM container_type
		WHERE name = #{name}
		LIMIT 1
	</select>


	<resultMap id="ContainerTypeMap" type="ContainerType">
		<id property="id" column="container_type_id" />
		<result property="name" column="name" />
	</resultMap>


	<select id="getTotalsByBarcode" parameterType="String" resultType="Map">
		(
			SELECT c.container_id, c.path_cache, true AS include,
				COUNT(DISTINCT COALESCE(iv.barcode, iv.alt_barcode)) AS total
			FROM container AS c
			LEFT OUTER JOIN inventory AS iv
				ON iv.container_id = c.container_id
			WHERE (iv.active OR iv.active IS NULL)
				AND c.container_id IN (
					WITH RECURSIVE r AS (
					SELECT container_id
					FROM container
					WHERE COALESCE(barcode, alt_barcode) = #{barcode}

					UNION ALL

					SELECT co.container_id
					FROM r
					JOIN container AS co
						ON r.container_id = co.parent_container_id
					) SELECT container_id FROM r
				)
			GROUP BY c.container_id, c.path_cache
			ORDER BY c.path_cache
		) UNION (
			SELECT c.container_id, c.path_cache, false AS include,
				COUNT(DISTINCT COALESCE(iv.barcode, iv.alt_barcode)) AS total
			FROM inventory AS iv
			JOIN container AS c
				ON c.container_id = iv.container_id
			WHERE iv.active
				AND COALESCE(iv.barcode, iv.alt_barcode) = #{barcode}
			GROUP BY c.container_id, c.path_cache
			ORDER BY c.path_cache
		)
	</select>


	<select id="getCollectionTotals" parameterType="Map" resultType="Map">
		SELECT co.name AS collection,
			COUNT(DISTINCT COALESCE(iv.barcode, iv.alt_barcode)) AS total
		FROM inventory AS iv
		JOIN collection AS co
			ON co.collection_id = iv.collection_id
		WHERE iv.active AND (
			COALESCE(iv.barcode, iv.alt_barcode) = #{barcode}
			<if test="container_id != null">
			OR iv.container_id IN <foreach collection="container_id" item="i" open="(" separator="," close=")">${i}</foreach>
			</if>
		)
		GROUP BY co.name
	</select>


	<select id="getWellTotals" parameterType="Map" resultType="Map">
		SELECT we.name AS well,
			COUNT(DISTINCT COALESCE(iv.barcode, iv.alt_barcode)) AS total
		FROM container AS co
		JOIN inventory AS iv
			ON iv.container_id = co.container_id
		JOIN inventory_well AS ivw
			ON ivw.inventory_id = iv.inventory_id
		JOIN well AS we
			ON we.well_id = ivw.well_id
		WHERE iv.active AND (
			COALESCE(iv.barcode, iv.alt_barcode) = #{barcode}
			<if test="container_id != null">
			OR iv.container_id IN <foreach collection="container_id" item="i" open="(" separator="," close=")">${i}</foreach>
			</if>
		)
		GROUP BY we.name
	</select>


	<select id="getBoreholeTotals" parameterType="Map" resultType="Map">
		SELECT 
			(
				COALESCE(ps.name, '') ||
				CASE WHEN ps.name IS NULL THEN '' ELSE ' - ' END ||
				bh.name
			) AS borehole,
			COUNT(DISTINCT COALESCE(iv.barcode, iv.alt_barcode)) AS total
		FROM container AS co
		JOIN inventory AS iv
			ON iv.container_id = co.container_id
		JOIN inventory_borehole AS ivb
			ON ivb.inventory_id = iv.inventory_id
		JOIN borehole AS bh
			ON bh.borehole_id = ivb.borehole_id
		LEFT OUTER JOIN prospect AS ps
			ON ps.prospect_id = bh.prospect_id
		WHERE iv.active AND (
			COALESCE(iv.barcode, iv.alt_barcode) = #{barcode}
			<if test="container_id != null">
			OR iv.container_id IN <foreach collection="container_id" item="i" open="(" separator="," close=")">${i}</foreach>
			</if>
		)
		GROUP BY ps.name, bh.name
		ORDER BY ps.name, bh.name
	</select>


	<select id="getKeywordSummary" parameterType="Map" resultType="String">
		SELECT STRING_AGG(name, ', ' ORDER BY keyword_group_id, name) AS keywords
		FROM keyword
		WHERE keyword_id IN (
			SELECT DISTINCT ik.keyword_id
			FROM inventory AS iv
			JOIN inventory_keyword AS ik
				ON iv.inventory_id = ik.inventory_id
			WHERE iv.active AND (
				COALESCE(iv.barcode, iv.alt_barcode) = #{barcode}
				<if test="container_id != null">
				OR iv.container_id IN <foreach collection="container_id" item="i" open="(" separator="," close=")">${i}</foreach>
				</if>
			)
		)
		LIMIT 1
	</select>


	<select id="getShotlineTotals" parameterType="Map" resultType="Map">
		SELECT sl.name AS shotline,
			COUNT(DISTINCT COALESCE(iv.barcode, iv.alt_barcode)) AS total
		FROM container AS co
		JOIN inventory AS iv
			ON iv.container_id = co.container_id
		JOIN inventory_shotpoint AS ivs
			ON ivs.inventory_id = iv.inventory_id
		JOIN shotpoint AS sp
			ON sp.shotpoint_id = ivs.shotpoint_id
		JOIN shotline AS sl
			ON sl.shotline_id = sp.shotline_id
		WHERE iv.active AND (
			COALESCE(iv.barcode, iv.alt_barcode) = #{barcode}
			<if test="container_id != null">
			OR iv.container_id IN <foreach collection="container_id" item="i" open="(" separator="," close=")">${i}</foreach>
			</if>
		)
		GROUP BY co.container_id, sl.shotline_id, sl.name
	</select>


	<select id="getContainerLogByInventoryID" parameterType="int" resultMap="ContainerLogMap">
		SELECT icl.inventory_container_log_id, con.path_cache, icl.log_date
		FROM inventory_container_log AS icl
		JOIN container AS con
			ON con.container_id = icl.container_id
		WHERE icl.inventory_id = #{id}
		ORDER BY icl.log_date DESC
	</select>


	<resultMap id="ContainerLogMap" type="ContainerLog">
		<id property="id" column="inventory_container_log_id" />
		<result property="path_cache" column="path_cache" />
		<result property="date" column="log_date" />
	</resultMap>
</mapper>
